#!/usr/bin/env ruby
# typed: true

# MiniStringF**K
def mini_string_fuck(c,v=0,r="")
    c.chars.select{|x|%w(+ .).include?(x)}.each{|e|e=="+"?v=(v+1)%256:r+=v.chr};r
end

pp mini_string_fuck("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.")

pp mini_string_fuck



# SmallF**K
def small_fuck(c,y,t=y.chars.map{|x|x.to_i})
    p=z=0;ms=c.enum_for(:scan,/\[|\]/).map{[$&,Regexp.last_match.begin(0)]}
    hm={};n=[];ms.each{|m,i|m=='['?n.push(i):hm[n.pop]=i}
    loop do case c[z]
        when"<";p-=1;when">";p+=1
        when"[";t[p]==0?z=hm[z]:""
        when"]";z=hm.key(z)-1
        when"*";t[p]=(t[p]+1)%2
    end;z+=1;if z>=c.length||p<0||p>=t.length;break;end;end;t.join
end

pp small_fuck("*>[[]*>]<*", "100")



# PaintF**K
def paint_fuck(c,x,w,h)
    i=j=t=z=0;b=Array.new(h){Array.new(w){0}}
    ms=c.enum_for(:scan,/\[|\]/).map{[$&,Regexp.last_match.begin(0)]}
    hm={};n=[];ms.each{|m,i|m=='['?n.push(i):hm[n.pop]=i}
    loop do z>=c.length||t>=x ?break: 0;case c[z]
        when"n";i-=1;when"e";j+=1;when"w";j-=1;when"s";i+=1
        when"[";b[i%h][j% w]==0?z=hm[z]:t-=1;when"]";z=hm.key(z)-1
        when"*";b[i%h][j% w]=(b[i%h][j% w]+1)%2;else t-=1                               ###     The   `%w`  can be shortened
    end;z+=1;t+=1;end;b.map(&:join).join("\r\n")
end

puts paint_fuck("*e*e*e*es*es*ws*ws*w*w*w*n*n*n*sss[s*]*", 100, 6, 9).chars.map{|x|x=="0"? "  ":x=="\n"? "\n":x=="\r"? "\r":"██"}.join



# BoolF**K
def bool_fuck(c,x="")
    i=10_00_000;z=y=0;b=Array.new(20_00_000){0};o=[]
    x=x.bytes.flat_map{|q|q.to_s(2).rjust(8,'0').chars.reverse.map(&:to_i)}
    ms=c.enum_for(:scan,/\[|\]/).map{[$&,Regexp.last_match.begin(0)]}
    hm={};n=[];ms.each{|m,i|m=='['?n.push(i):hm[n.pop]=i}
    loop do z>=c.length ? break: 0;case c[z]
        when"<";i-=1;when">";i+=1;when";";o.push(b[i]);
        when"[";b[i]==0?z=hm[z]:0;when"]";z=hm.key(z)-1
        when"+";b[i]=(b[i]+1)%2;when",";b[i]=x[y];y+=1
    end;z+=1;end;o+=[0]*(8-o.size%8)if o.size%8!=0
    o.each_slice(8).map{|b|b.reverse.join.to_i(2).chr}.join
end

pp bool_fuck(";;;+;+;;+;+;
+;+;+;+;;+;;+;
;;+;;+;+;;+;
;;+;;+;+;;+;
+;;;;+;+;;+;
;;+;;+;+;+;;
;;;;;+;+;;
+;;;+;+;;;+;
+;;;;+;+;;+;
;+;+;;+;;;+;
;;+;;+;+;;+;
;;+;+;;+;;+;
+;+;;;;+;+;;
;+;+;+;")

pp bool_fuck(">,>,>,>,>,>,>,>,<<<<<<<[>]+<[+<]>>>>>>>>>[+]+<<<<<<<<+[>+]<[<]>>>>>>>>>[+<<<<<<<<[>]+<[+<]>>>>>>>>>+<<<<<<<<+[>+]<[<]>>>>>>>>>[+]<<<<<<<<;>;>;>;>;>;>;>;<<<<<<<,>,>,>,>,>,>,>,<<<<<<<[>]+<[+<]>>>>>>>>>[+]+<<<<<<<<+[>+]<[<]>>>>>>>>>]<[+<]", "Codewars" + 255.chr)



__END__
